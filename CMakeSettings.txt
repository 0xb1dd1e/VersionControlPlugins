################################################################################################
# Globals
################################################################################################

################################################################################################
# Compiler flags
################################################################################################

################################################################################################
# Root directory
################################################################################################
SET( CM_ROOT_DIRECTORY ${CMAKE_SOURCE_DIR}/Build )
SET( CM_BIN_DIR 	${CM_ROOT_DIRECTORY}/${CMAKE_CFG_INTDIR} )
SET( CM_DISTRIB_DIR ${CM_ROOT_DIRECTORY}/Package )

SET( CMAKE_BINARY_DIR ${CM_BIN_DIR} )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CM_BIN_DIR} )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CM_BIN_DIR} )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CM_ROOT_DIRECTORY} )

MESSAGE( "==========================================")
MESSAGE( "Root:       " ${CM_ROOT_DIRECTORY} )
MESSAGE( "Bin:        " ${CM_BIN_DIR} )
MESSAGE( "Distrib:    " ${CM_DISTRIB_DIR} )
MESSAGE( "==========================================")

################################################################################################
# Globals
################################################################################################

################################################################################################
# Macro definitions
################################################################################################

MACRO(CM_CONFIGURE_MSVC_RUNTIME)
	IF (MSVC OR MSVC10)
		# DEFAULT TO STATICALLY-LINKED RUNTIME.
		IF ("${MSVC_RUNTIME}" STREQUAL "")
			SET(MSVC_RUNTIME "STATIC")
		ENDIF()
		
		# SET COMPILER OPTIONS.
		SET(VARIABLES
			CMAKE_C_FLAGS_DEBUG
			CMAKE_C_FLAGS_MINSIZEREL
			CMAKE_C_FLAGS_RELEASE
			CMAKE_C_FLAGS_RELWITHDEBINFO
			CMAKE_CXX_FLAGS_DEBUG
			CMAKE_CXX_FLAGS_MINSIZEREL
			CMAKE_CXX_FLAGS_RELEASE
			CMAKE_CXX_FLAGS_RELWITHDEBINFO
		)
		
		IF (${MSVC_RUNTIME} STREQUAL "STATIC")
			FOREACH (VARIABLE ${VARIABLES})
				IF (${VARIABLE} MATCHES "/MD")
					STRING(REGEX REPLACE "/MD" "/MT" ${VARIABLE} "${${VARIABLE}}")
				ENDIF ()
			ENDFOREACH ()
		ELSE ()
			FOREACH (VARIABLE ${VARIABLES})
				IF (${VARIABLE} MATCHES "/MT")
					STRING(REGEX REPLACE "/MT" "/MD" ${VARIABLE} "${${VARIABLE}}")
				ENDIF ()
			ENDFOREACH ()
		ENDIF ()
		
		MESSAGE(STATUS "Initial build flags:")
		FOREACH(VARIABLE ${VARIABLES})
			MESSAGE(STATUS "  '${VARIABLE}': ${${VARIABLE}}")
		ENDFOREACH()
		MESSAGE(STATUS "")
		
	ENDIF (MSVC OR MSVC10)
ENDMACRO(CM_CONFIGURE_MSVC_RUNTIME)

# *******************************************************
# Target Defintiions Begin
#  TARGET_TYPE [APP,EXECUTABLE,CUSTOM,STATIC,SHARED]
# *******************************************************
MACRO(CM_TARGET_BEGIN  TARGET_NAME  TARGET_TYPE  TARGET_BINARY_SUBDIR  TARGET_BINARY_NAME   )
	# define targets / project name
	#-------------------------------
	SET(CM_TARGET_NAME ${TARGET_NAME})
	
	IF (CM_IPHONE)
		IF (${TARGET_TYPE} STREQUAL "SHARED")
			SET(CM_TARGET_TYPE "STATIC")
		ELSE (${TARGET_TYPE} STREQUAL "SHARED")
			SET(CM_TARGET_TYPE ${TARGET_TYPE})
		ENDIF (${TARGET_TYPE} STREQUAL "SHARED")
	ELSE (CM_IPHONE)
		SET(CM_TARGET_TYPE ${TARGET_TYPE})
	ENDIF (CM_IPHONE)
	SET(CM_TARGET_BINARY_SUBDIR ${TARGET_BINARY_SUBDIR})
	SET(CM_TARGET_BINARY_NAME ${TARGET_BINARY_NAME})

	SET(CM_TARGET_DEPENDS)
	SET(CM_TARGET_PUBLIC_DEPENDS)
	SET(CM_TARGET_INCLUDES)
	SET(CM_TARGET_DEFINES)
	SET(CM_TARGET_SOURCES)
	
	SET(CM_TARGET_LIBRARIES)
	SET(CM_TARGET_DEBUG_LIBRARIES)
	SET(CM_TARGET_RELEASE_LIBRARIES)
	
	SET(CM_TARGET_COPY_FILES)
	SET(CM_TARGET_COPY_DIR)
	
	SET(CM_TARGET_INSTALL_BINARIES)
	SET(CM_TARGET_INSTALL_FRAMEWORKS)
	SET(CM_TARGET_INSTALL_EMBEDDED_RESOURCE)
	SET(CM_TARGET_INSTALL_EMBEDDED_FRAMEWORKS)
	
	SET(CM_TARGET_INSTALL_ADDITIONNAL)

	SET(CM_TARGET_QT_MOC)
	SET(CM_TARGET_QT_UI)
	SET(CM_TARGET_QT_RESOURCES)

	SET(CM_TARGET_DEPEND_INCLUDES)
	SET(CM_TARGET_DEPEND_DEFINES)
	SET(CM_TARGET_DEPEND_SOURCES)
	SET(CM_TARGET_DEPEND_LIBRARIES)
	SET(CM_TARGET_DEPEND_DEBUG_LIBRARIES)
	SET(CM_TARGET_DEPEND_RELEASE_LIBRARIES)

	# BUNDLE
	SET(CM_TARGET_BUNDLE_INFO_PLIST "")
	
	SET(CM_BINARY_DIR ${CM_BIN_DIR} )
	
		
	# Define the projects
	#-------------------------------
	PROJECT(${TARGET_NAME})		
ENDMACRO(CM_TARGET_BEGIN  TARGET_NAME  TARGET_TYPE  TARGET_BINARY_SUBDIR  TARGET_BINARY_NAME   )
	
# *******************************************************
# Target Defintinions End
# *******************************************************
MACRO(CM_TARGET_END)
	
	# Display Target Information
	# -------------------------------------
	MESSAGE( "Defining  [${CM_TARGET_NAME}] : ${CM_TARGET_DEPENDS}" )

	# Grap dependencies Libraries
	# -------------------------------------
	FOREACH(DEPEND_TARGET ${CM_TARGET_DEPENDS})
		CM_GET_TARGET_PROPERTY( CM_TARGET_INCLUDES	${DEPEND_TARGET}	CM_DEPEND_INCLUDES)
		CM_GET_TARGET_PROPERTY( CM_TARGET_LIBRARIES ${DEPEND_TARGET}	CM_DEPEND_LIBRARIES)
		CM_GET_TARGET_PROPERTY( CM_TARGET_DEBUG_LIBRARIES ${DEPEND_TARGET}	CM_DEPEND_DEBUG_LIBRARIES)
		CM_GET_TARGET_PROPERTY( CM_TARGET_RELEASE_LIBRARIES ${DEPEND_TARGET}	CM_DEPEND_RELEASE_LIBRARIES)
		CM_GET_TARGET_PROPERTY( CM_TARGET_DEFINES	${DEPEND_TARGET}	CM_DEPEND_DEFINES)
		CM_GET_TARGET_PROPERTY( CM_TARGET_SOURCES	${DEPEND_TARGET}	CM_DEPEND_SOURCES)
	ENDFOREACH(DEPEND_TARGET)
	
	# COPY TRANSLATIONS
	# -------------------------------------
	IF (CM_TARGET_XLATE)
		SET(TMP_DST)
		SET(LANG_RES_FILE "${CMAKE_CURRENT_BINARY_DIR}/langage.qrc")

		SET ( CM_TARGET_SOURCES ${CM_TARGET_SOURCES}  ${LANG_RES_FILE})
		SOURCE_GROUP( "resources" FILES "${LANG_RES_FILE}" )

		SET_PROPERTY(SOURCE ${LANG_RES_FILE} PROPERTY GENERATED TRUE)

		FILE(WRITE ${LANG_RES_FILE} "<RCC>\n\t<qresource>\n" )

		FOREACH(TMP_FILE ${CM_TARGET_XLATE})

			get_filename_component(RES_FILE ${TMP_FILE}.qm NAME)
			SET(RES_FILE ${RES_FILE})
			
			get_filename_component(TMP_DST ${CMAKE_CURRENT_BINARY_DIR}/${RES_FILE} ABSOLUTE)
			
			ADD_CUSTOM_COMMAND(OUTPUT ${TMP_DST}
			 COMMAND lrelease
			 ARGS "${CMAKE_CURRENT_SOURCE_DIR}/${TMP_FILE}" -qm "${TMP_DST}"
			 MAIN_DEPENDENCY ${TMP_FILE})
			 
			ADD_CUSTOM_COMMAND(OUTPUT ${TMP_FILE}
			 COMMAND lupdate
			 ARGS . -ts "${TMP_FILE}"
			 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
			 DEPENDS *.ui *.h *.cpp)

			 SOURCE_GROUP( "resources" FILES "${TMP_DST}" )
			 SET ( CM_TARGET_SOURCES ${CM_TARGET_SOURCES}  ${TMP_DST})

			 FILE(APPEND ${LANG_RES_FILE} "\t\t<file>${RES_FILE}</file>\n")

		ENDFOREACH(TMP_FILE ${CM_TARGET_XLATE})

		FILE(APPEND ${LANG_RES_FILE} "\t</qresource>\n</RCC>\n")

		SET( CM_TARGET_QT_RESOURCES ${CM_TARGET_QT_RESOURCES} ${LANG_RES_FILE} )


	ENDIF (CM_TARGET_XLATE)

	# Special QT (Add all the moc files to the targets)
	# -------------------------------------------------
	IF (CM_TARGET_QT_MOC)
		SET(TMP_FILES)
		QT4_WRAP_CPP( TMP_FILES ${CM_TARGET_QT_MOC} )
		SOURCE_GROUP( "moc" FILES ${TMP_FILES} )
		SET( CM_TARGET_SOURCES ${CM_TARGET_SOURCES} ${TMP_FILES} )
	ENDIF (CM_TARGET_QT_MOC)
	
	IF (CM_TARGET_QT_UI)
#		IF (QT4_WRAP_UI) 
			SET(TMP_FILES)
			QT4_WRAP_UI( TMP_FILES ${CM_TARGET_QT_UI} )
			SET	( CM_TARGET_SOURCES ${CM_TARGET_SOURCES} ${TMP_FILES} )
#		ENDIF (QT4_WRAP_UI) 
	ENDIF (CM_TARGET_QT_UI)

	IF (CM_TARGET_QT_RESOURCES)
#		IF (QT4_ADD_RESOURCES) 
			SET(TMP_FILES)
			QT4_ADD_RESOURCES( TMP_FILES ${CM_TARGET_QT_RESOURCES} )
			SET( CM_TARGET_SOURCES ${CM_TARGET_SOURCES} ${TMP_FILES} )
#		ENDIF (QT4_ADD_RESOURCES) 
	ENDIF (CM_TARGET_QT_RESOURCES)

	# Includes
	# -------------------------------------
	INCLUDE_DIRECTORIES(AFTER ${CM_TARGET_INCLUDES})
	
	# Defines
	# -------------------------------------
	ADD_DEFINITIONS(${CM_TARGET_DEFINES})


	# Add Executable Targets
	# -------------------------------------
	IF (${CM_TARGET_TYPE} STREQUAL "EXECUTABLE" OR ${CM_TARGET_TYPE} STREQUAL "APP" )
		SET(EXECUTABLE_OUTPUT_PATH	"${CM_BIN_DIR}")
		IF (APPLE) 
			IF (${CM_TARGET_TYPE} STREQUAL "APP")
				ADD_EXECUTABLE( ${CM_TARGET_NAME} MACOSX_BUNDLE ${CM_TARGET_SOURCES} )
				IF (NOT ${CM_TARGET_BUNDLE_INFO_PLIST} STREQUAL "")
					SET_TARGET_PROPERTIES( ${CM_TARGET_NAME} PROPERTIES	MACOSX_BUNDLE_INFO_PLIST ${CM_TARGET_BUNDLE_INFO_PLIST} )
				ENDIF (NOT ${CM_TARGET_BUNDLE_INFO_PLIST} STREQUAL "")
				SET (CM_TARGET_BINARY_FILENAME	${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/${CM_TARGET_BINARY_NAME}.app)
			ELSE (${CM_TARGET_TYPE} STREQUAL "APP")
				ADD_EXECUTABLE( ${CM_TARGET_NAME} ${CM_TARGET_SOURCES} )
				SET (CM_TARGET_BINARY_FILENAME	${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/${CM_TARGET_BINARY_NAME})
			ENDIF (${CM_TARGET_TYPE} STREQUAL "APP")
		ELSE (APPLE) 
			IF (WIN32)
				ADD_EXECUTABLE( ${CM_TARGET_NAME} WIN32 ${CM_TARGET_SOURCES} )
			ELSE (WIN32)
				ADD_EXECUTABLE( ${CM_TARGET_NAME} ${CM_TARGET_SOURCES} )
			ENDIF (WIN32)
			SET (CM_TARGET_BINARY_FILENAME	${EXECUTABLE_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/${CM_TARGET_BINARY_NAME})
		ENDIF (APPLE) 
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES OUTPUT_NAME ${CM_TARGET_BINARY_NAME})
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES FULL_OUTPUT_NAME ${CM_TARGET_BINARY_FILENAME})
	ENDIF (${CM_TARGET_TYPE} STREQUAL "EXECUTABLE" OR ${CM_TARGET_TYPE} STREQUAL "APP" )

	# Add Shared Libraries Targets
	# ------------------------	-------------
	IF (${CM_TARGET_TYPE} STREQUAL "SHARED")
		SET(LIBRARY_OUTPUT_PATH		"${CM_BIN_DIR}")
		ADD_LIBRARY( ${CM_TARGET_NAME} SHARED ${CM_TARGET_SOURCES} )
		IF (APPLE)
		
			# Resource Files
			# ------------------------------------------------------------------
			SET (CM_TARGET_BINARY_FILENAME	${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/lib${CM_TARGET_BINARY_NAME}.dylib)
			CM_TARGET_DEPEND_ADD_LIBRARIES( ${CM_TARGET_BINARY_FILENAME} )
		ELSE (APPLE)
			IF (UNIX)
				SET (CM_TARGET_BINARY_FILENAME	${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/lib${CM_TARGET_BINARY_NAME}.so)
				CM_TARGET_DEPEND_ADD_LIBRARIES( ${CM_TARGET_BINARY_FILENAME} )
			ELSE (UNIX)	
				SET (CM_TARGET_BINARY_FILENAME	${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/${CM_TARGET_BINARY_NAME}.dll)
				CM_TARGET_DEPEND_ADD_LIBRARIES( ${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/${CM_TARGET_BINARY_NAME}.lib )	
			ENDIF (UNIX)
		ENDIF (APPLE)	
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES OUTPUT_NAME ${CM_TARGET_BINARY_NAME})
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES FULL_OUTPUT_NAME ${CM_TARGET_BINARY_FILENAME})
	ENDIF (${CM_TARGET_TYPE} STREQUAL "SHARED")

	# Add Static Libraries Targets
	# -------------------------------------
	IF (${CM_TARGET_TYPE} STREQUAL "STATIC")
		SET(LIBRARY_OUTPUT_PATH		"${CM_BIN_DIR}")
		ADD_LIBRARY( ${CM_TARGET_NAME} STATIC ${CM_TARGET_SOURCES} )
		IF (APPLE OR UNIX) 
#			IF (CM_IPHONE)
#				SET (CM_TARGET_BINARY_FILENAME	${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}-iphonesimulator/lib${CM_TARGET_BINARY_NAME}.a)
#				MESSAGE("WARNING Linking with the simulator-version of the library, need to be fixed for release !!!")
#				MESSAGE("WARNING Linking with the simulator-version of the library, need to be fixed for release !!!")
#			ELSE (CM_IPHONE)
				SET (CM_TARGET_BINARY_FILENAME	${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/lib${CM_TARGET_BINARY_NAME}.a)
#			ENDIF (CM_IPHONE)
			CM_TARGET_DEPEND_ADD_LIBRARIES( ${CM_TARGET_BINARY_FILENAME} )
		ELSE (APPLE OR UNIX)
			SET (CM_TARGET_BINARY_FILENAME	${LIBRARY_OUTPUT_PATH}/${CMAKE_CFG_INTDIR}/${CM_TARGET_BINARY_NAME}.lib)
			CM_TARGET_DEPEND_ADD_LIBRARIES( ${CM_TARGET_BINARY_FILENAME} )
		ENDIF (APPLE OR UNIX)	
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES OUTPUT_NAME ${CM_TARGET_BINARY_NAME})
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES FULL_OUTPUT_NAME ${CM_TARGET_BINARY_FILENAME})
	ENDIF (${CM_TARGET_TYPE} STREQUAL "STATIC")

	# Add Custom Targets
	# -------------------------------------
	IF (${CM_TARGET_TYPE} STREQUAL "CUSTOM")
		ADD_CUSTOM_TARGET( ${CM_TARGET_NAME} ${CM_TARGET_SOURCES} )
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES FULL_OUTPUT_NAME "")
	ENDIF (${CM_TARGET_TYPE} STREQUAL "CUSTOM")
	
	# Add Custom Always Targets
	# -------------------------------------
	IF (${CM_TARGET_TYPE} STREQUAL "CUSTOM-ALWAYS")
		ADD_CUSTOM_TARGET( ${CM_TARGET_NAME} ALL ${CM_TARGET_SOURCES} )
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES FULL_OUTPUT_NAME "")
	ENDIF (${CM_TARGET_TYPE} STREQUAL "CUSTOM-ALWAYS")
	
	# Dependencies
	# -------------------------------------
	# Grap dependencies Libraries
	# -------------------------------------
	FOREACH(DEPEND_TARGET ${CM_TARGET_DEPENDS})
		IF (APPLE)
			ADD_DEPENDENCIES( ${CM_TARGET_NAME} ${DEPEND_TARGET} )
		ELSE (APPLE)
			ADD_DEPENDENCIES( ${CM_TARGET_NAME} ${DEPEND_TARGET} )
		ENDIF (APPLE)
	ENDFOREACH(DEPEND_TARGET)
	
	# Add Additionnal properties to the Trget for the installer
	IF (CM_TARGET_INSTALL_ADDITIONNAL)
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES INSTALL_ADDITIONNAL "${CM_TARGET_INSTALL_ADDITIONNAL}")
	ELSE (CM_TARGET_INSTALL_ADDITIONNAL)
		SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES INSTALL_ADDITIONNAL "")
	ENDIF (CM_TARGET_INSTALL_ADDITIONNAL)
	
	# Libraries
	# -------------------------------------
	TARGET_LINK_LIBRARIES(${CM_TARGET_NAME} ${CM_TARGET_LIBRARIES})
	IF (CM_TARGET_DEBUG_LIBRARIES)
		TARGET_LINK_LIBRARIES(${CM_TARGET_NAME} debug ${CM_TARGET_DEBUG_LIBRARIES})
	ENDIF (CM_TARGET_DEBUG_LIBRARIES)
	IF (CM_TARGET_RELEASE_LIBRARIES)
		TARGET_LINK_LIBRARIES(${CM_TARGET_NAME} optimized ${CM_TARGET_RELEASE_LIBRARIES})
	ENDIF (CM_TARGET_RELEASE_LIBRARIES)
	
	# COPY FILES
	# -------------------------------------
	IF (CM_TARGET_COPY_FILES)
		SET(TMP_SRC)
		SET(TMP_DST)
		FOREACH(TMP_FILE ${CM_TARGET_COPY_FILES})
			IF (NOT TMP_SRC)
				SET(TMP_SRC ${TMP_FILE})
			ELSE (NOT TMP_SRC)
				SET(TMP_DST ${TMP_FILE})
				ADD_CUSTOM_COMMAND(
					TARGET ${CM_TARGET_NAME} POST_BUILD
					COMMAND ${CMAKE_COMMAND} -E copy_if_different "${TMP_SRC}" "${TMP_DST}"
				)
				SET(TMP_SRC)
				SET(TMP_DST)
			ENDIF (NOT TMP_SRC)
		ENDFOREACH(TMP_FILE ${CM_TARGET_COPY_FILES})
	ENDIF (CM_TARGET_COPY_FILES)
	

	# DIRECTORIES
	# -------------------------------------
	IF (CM_TARGET_COPY_DIR)
		SET(TMP_SRC)
		SET(TMP_DST)
		FOREACH(TMP_FILE ${CM_TARGET_COPY_DIR})
			IF (NOT TMP_SRC)
				SET(TMP_SRC ${TMP_FILE})
			ELSE (NOT TMP_SRC)
				SET(TMP_DST ${TMP_FILE})
				ADD_CUSTOM_COMMAND(
					TARGET ${CM_TARGET_NAME} POST_BUILD
					COMMAND ${CMAKE_COMMAND} -E copy_directory "${TMP_SRC}" "${TMP_DST}"
				)
				SET(TMP_SRC)
				SET(TMP_DST)
			ENDIF (NOT TMP_SRC)
		ENDFOREACH(TMP_FILE ${CM_TARGET_COPY_DIR})
	ENDIF (CM_TARGET_COPY_DIR)

	# INSTALL the libraries
	# -------------------------------------
	IF (CM_TARGET_INSTALL_BINARIES)
		FOREACH(TARGET_BINARIES ${CM_TARGET_INSTALL_BINARIES})
			ADD_CUSTOM_COMMAND(
				TARGET ${CM_TARGET_NAME} POST_BUILD
				COMMAND ${CMAKE_COMMAND} -E copy_if_different "${TARGET_BINARIES}" "${CM_BIN_DIR}"
			)
		ENDFOREACH(TARGET_BINARIES)
	ENDIF (CM_TARGET_INSTALL_BINARIES)
	
	IF (CM_TARGET_INSTALL_EMBEDDED_RESOURCE)
		IF (${CM_TARGET_TYPE} STREQUAL "APP")
			IF (CM_TARGET_INSTALL_EMBEDDED_RESOURCE)
				SET(TMP_SRC)
				SET(TMP_DST)
				FOREACH(TMP_FILE ${CM_TARGET_INSTALL_EMBEDDED_RESOURCE})
					IF (NOT TMP_SRC)
						SET(TMP_SRC ${TMP_FILE})
					ELSE (NOT TMP_SRC)
						SET(TMP_DST ${TMP_FILE})
						IF (APPLE)
							get_filename_component(TMP_DST "${CM_TARGET_BINARY_FILENAME}/${TMP_FILE}" ABSOLUTE)						
						ELSE (APPLE)
							get_filename_component(TMP_DST "${CM_TARGET_BINARY_FILENAME}/../${TMP_FILE}" ABSOLUTE)						
						ENDIF (APPLE)	
						ADD_CUSTOM_COMMAND(
							TARGET ${CM_TARGET_NAME} POST_BUILD
							COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_CURRENT_SOURCE_DIR}/${TMP_SRC}" "${TMP_DST}"
						)
						SET(TMP_SRC)
						SET(TMP_DST)
					ENDIF (NOT TMP_SRC)
				ENDFOREACH(TMP_FILE ${CM_TARGET_INSTALL_EMBEDDED_RESOURCE})
			ENDIF (CM_TARGET_INSTALL_EMBEDDED_RESOURCE)
		ELSE (${CM_TARGET_TYPE} STREQUAL "APP")
			IF (CM_TARGET_INSTALL_EMBEDDED_RESOURCE)
				SET(TMP_SRC)
				SET(TMP_DST)
				FOREACH(TMP_FILE ${CM_TARGET_INSTALL_EMBEDDED_RESOURCE})
					IF (NOT TMP_SRC)
						SET(TMP_SRC ${TMP_FILE})
					ELSE (NOT TMP_SRC)
						SET(TMP_DST ${TMP_FILE})
						get_filename_component(TMP_DST "${CM_TARGET_BINARY_FILENAME}/../${TMP_FILE}" ABSOLUTE)						
						ADD_CUSTOM_COMMAND(
							TARGET ${CM_TARGET_NAME} POST_BUILD
							COMMAND ${CMAKE_COMMAND} -E copy_directory "${CMAKE_CURRENT_SOURCE_DIR}/${TMP_SRC}" "${TMP_DST}"
						)
						SET(TMP_SRC)
						SET(TMP_DST)
					ENDIF (NOT TMP_SRC)
				ENDFOREACH(TMP_FILE ${CM_TARGET_INSTALL_EMBEDDED_RESOURCE})
			ENDIF (CM_TARGET_INSTALL_EMBEDDED_RESOURCE)
		ENDIF (${CM_TARGET_TYPE} STREQUAL "APP")
	ENDIF (CM_TARGET_INSTALL_EMBEDDED_RESOURCE)
	

	# Install the framework
	# -------------------------------------
	IF (CM_TARGET_INSTALL_FRAMEWORKS)
		IF (APPLE)
			# install name tools management
			# ------------------------------------
			FOREACH	(TARGET_BINARIES ${CM_TARGET_INSTALL_FRAMEWORKS})
				# Get the old name of the library
				# -----------------------------------
				EXECUTE_PROCESS(COMMAND otool -D ${TARGET_BINARIES} OUTPUT_VARIABLE OTOOL_OUTPUT )
				STRING(REGEX REPLACE "^.*:\n *" "" OTOOL_OUTPUT ${OTOOL_OUTPUT} ) 
				STRING(REGEX REPLACE " *\n *$" "" OTOOL_LIBRARY_NAME ${OTOOL_OUTPUT} ) 
				
				# Set the new name of the library
				# -----------------------------------
				GET_FILENAME_COMPONENT( FILENAME ${TARGET_BINARIES} NAME )
				SET(LIBRARY_NAME @executable_path/${FILENAME})
				ADD_CUSTOM_COMMAND(
					TARGET ${CM_TARGET_NAME} PRE_BUILD
					COMMAND /usr/bin/install_name_tool -id ${LIBRARY_NAME} ${TARGET_BINARIES}
				)

				# Set the new name of the libraries that depends on this library
				# ---------------------------------------------------------------
				FOREACH	(SUB_TARGET_BINARIES ${CM_TARGET_INSTALL_FRAMEWORKS})
					ADD_CUSTOM_COMMAND(
						TARGET ${CM_TARGET_NAME} PRE_BUILD
						COMMAND /usr/bin/install_name_tool -change ${OTOOL_LIBRARY_NAME} ${LIBRARY_NAME} ${SUB_TARGET_BINARIES}
					)
				ENDFOREACH(SUB_TARGET_BINARIES)
				GET_FILENAME_COMPONENT( FILENAME ${TARGET_BINARIES} NAME )
				ADD_CUSTOM_COMMAND(
					TARGET ${CM_TARGET_NAME} POST_BUILD
					COMMAND ${CMAKE_COMMAND} -E copy_directory "${TARGET_BINARIES}" "${CM_BIN_DIR}/${FILENAME}"
				)
			ENDFOREACH(TARGET_BINARIES)

		ENDIF (APPLE)
	ENDIF (CM_TARGET_INSTALL_FRAMEWORKS)
	
	# Install the embedded framework
	# -------------------------------------
	IF (CM_TARGET_INSTALL_EMBEDDED_FRAMEWORKS)
		IF (APPLE)
			
            SET(TMP_LIBRARY)
			SET(TMP_EXECUTABLE)
            
            FOREACH	(TARGET_BINARIES ${CM_TARGET_INSTALL_EMBEDDED_FRAMEWORKS})
            
				IF (NOT TMP_LIBRARY)
					SET(TMP_LIBRARY ${TARGET_BINARIES})
				ELSE (NOT TMP_LIBRARY)
					SET(TMP_EXECUTABLE ${TARGET_BINARIES})
                    
                    GET_FILENAME_COMPONENT( FILENAME ${TMP_LIBRARY} NAME )
                   
                    ADD_CUSTOM_COMMAND(
                        TARGET ${CM_TARGET_NAME} POST_BUILD
                        COMMAND /usr/bin/install_name_tool -change ${TMP_LIBRARY} @executable_path/../Frameworks/${FILENAME} ${CM_TARGET_BINARY_FILENAME}/${TMP_EXECUTABLE}
                    )
                    
                    ADD_CUSTOM_COMMAND(
                        TARGET ${CM_TARGET_NAME} POST_BUILD
                        COMMAND /usr/bin/install_name_tool -id @executable_path/../Frameworks/${FILENAME} ${CM_TARGET_BINARY_FILENAME}/Contents/Frameworks/${FILENAME}
                    )
                    
					SET(TMP_LIBRARY)
					SET(TMP_EXECUTABLE)
				ENDIF (NOT TMP_LIBRARY)
                    
            ENDFOREACH(TARGET_BINARIES)
		
        ENDIF (APPLE)
	ENDIF (CM_TARGET_INSTALL_EMBEDDED_FRAMEWORKS)
	
	# Set target specific properties
	# -------------------------------------
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES LINK_FLAGS "${CM_TARGET_LINK_FLAGS}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES LINK_FLAGS_DEBUG "${CM_TARGET_LINK_FLAGS}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES LINK_FLAGS_RELEASE "${CM_TARGET_LINK_FLAGS}")	
		
	# Aggregate the dependencies from the public depends 
	# to the child dependencies, carry libraries and include
	# ---------------------------------------------------
	FOREACH(DEPEND_TARGET ${CM_TARGET_PUBLIC_DEPENDS})
		CM_GET_TARGET_PROPERTY( CM_TARGET_DEPEND_INCLUDES	${DEPEND_TARGET}	CM_DEPEND_INCLUDES)
		CM_GET_TARGET_PROPERTY( CM_TARGET_DEPEND_DEFINES	${DEPEND_TARGET}	CM_DEPEND_DEFINES)
		# libraries and source are tricky for now just carry includes and defines
		#		CM_GET_TARGET_PROPERTY( CM_TARGET_DEPEND_SOURCES	${DEPEND_TARGET}	CM_TARGET_DEPEND_SOURCES)
		#		CM_GET_TARGET_PROPERTY( CM_TARGET_DEPEND_LIBRARIES  ${DEPEND_TARGET}	CM_TARGET_DEPEND_LIBRARIES)
		
	ENDFOREACH(DEPEND_TARGET)

	# Setup depends properties on the current target for others targets to grab
	# -------------------------------------
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_DEPEND_INCLUDES	"${CM_TARGET_DEPEND_INCLUDES}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_DEPEND_LIBRARIES	"${CM_TARGET_DEPEND_LIBRARIES}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_DEPEND_DEBUG_LIBRARIES	"${CM_TARGET_DEPEND_DEBUG_LIBRARIES}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_DEPEND_RELEASE_LIBRARIES	"${CM_TARGET_DEPEND_RELEASE_LIBRARIES}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_DEPEND_DEFINES	"${CM_TARGET_DEPEND_DEFINES}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_DEPEND_SOURCES	"${CM_TARGET_DEPEND_SOURCES}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_BINARY_FILENAME   "${CM_TARGET_BINARY_FILENAME}")	
	SET_TARGET_PROPERTIES(${CM_TARGET_NAME} PROPERTIES CM_DEPENDS		    "${CM_TARGET_DEPENDS}")	
ENDMACRO(CM_TARGET_END)




# *******************************************************
# Target Add Sources
# *******************************************************
MACRO(CM_TARGET_ADD_SOURCES GROUP)
	SET( CM_TARGET_SOURCES ${CM_TARGET_SOURCES} ${ARGN} )
	IF (NOT ${GROUP} STREQUAL "")
		SOURCE_GROUP( ${GROUP} FILES ${ARGN} )
	ENDIF (NOT ${GROUP} STREQUAL "")
ENDMACRO(CM_TARGET_ADD_SOURCES GROUP)

MACRO(CM_TARGET_ADD_BUNDLE_RESOURCES DESTINATION )
	SET( CM_TARGET_SOURCES ${CM_TARGET_SOURCES} ${ARGN} )
	SOURCE_GROUP( Resources FILES ${ARGN} )
	set_source_files_properties( 
		${ARGN}
		PROPERTIES
		MACOSX_CONTENT 1
		MACOSX_PACKAGE_LOCATION ${DESTINATION} 
	)			
ENDMACRO(CM_TARGET_ADD_BUNDLE_RESOURCES DESTINATION)

MACRO(CM_TARGET_ADD_BUNDLE_XIB DESTINATION XIB )
	CM_GET_FILENAME( NIB_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${XIB} )
	SET( NIB_FILE ${CMAKE_BINARY_DIR}/${NIB_FILE}.nib )
	SET( XIB_FILE ${CMAKE_CURRENT_SOURCE_DIR}/${XIB}.xib )
	SET( CM_TARGET_SOURCES ${CM_TARGET_SOURCES} ${XIB_FILE} ${NIB_FILE})
	SOURCE_GROUP( Resources FILES ${XIB_FILE} ${NIB_FILE})
	add_custom_command(
		OUTPUT ${NIB_FILE}
		COMMAND ibtool
		ARGS --errors --warnings --notices --output-format human-readable-text --compile ${NIB_FILE} ${XIB_FILE}
		DEPENDS ${XIB_FILE}
	)
	set_source_files_properties( 
		${NIB_FILE}
		PROPERTIES
		MACOSX_CONTENT 1
		MACOSX_PACKAGE_LOCATION ${DESTINATION} 
	)
ENDMACRO(CM_TARGET_ADD_BUNDLE_XIB DESTINATION XIB )
	
MACRO(CM_TARGET_DEPEND_ADD_SOURCES)
	SET(CM_TARGET_DEPEND_SOURCES ${CM_TARGET_DEPEND_SOURCES} ${ARGN})
ENDMACRO(CM_TARGET_DEPEND_ADD_SOURCES SOURCES)

# *******************************************************
# Target Add binaries
# *******************************************************
MACRO(CM_TARGET_ADD_COPY_FILES SRC DST)
	SET( CM_TARGET_COPY_FILES ${CM_TARGET_COPY_FILES} ${SRC} ${DST})
ENDMACRO(CM_TARGET_ADD_COPY_FILES SRC DST)

MACRO(CM_TARGET_ADD_COPY_DIR SRC DST)
	SET( CM_TARGET_COPY_DIR ${CM_TARGET_COPY_DIR} ${SRC} ${DST})
ENDMACRO(CM_TARGET_ADD_COPY_DIR SRC DST)

MACRO(CM_TARGET_ADD_INSTALL_BINARIES)
	FOREACH(BINARIES ${ARGN})
		SET( CM_TARGET_INSTALL_BINARIES ${CM_TARGET_INSTALL_BINARIES} ${BINARIES} )
	ENDFOREACH(BINARIES)
ENDMACRO(CM_TARGET_ADD_INSTALL_BINARIES)

MACRO(CM_TARGET_ADD_INSTALL_FRAMEWORKS)
	FOREACH(BINARIES ${ARGN})
		SET( CM_TARGET_INSTALL_FRAMEWORKS ${CM_TARGET_INSTALL_FRAMEWORKS} ${BINARIES} )
	ENDFOREACH(BINARIES)
ENDMACRO(CM_TARGET_ADD_INSTALL_FRAMEWORKS)

MACRO(CM_TARGET_ADD_EMBEDDED_RESOURCE)
	FOREACH(RESOURCE ${ARGN})
		SET( CM_TARGET_INSTALL_EMBEDDED_RESOURCE ${CM_TARGET_INSTALL_EMBEDDED_RESOURCE} ${RESOURCE} )
	ENDFOREACH(RESOURCE)
ENDMACRO(CM_TARGET_ADD_EMBEDDED_RESOURCE)

MACRO(CM_TARGET_ADD_EMBEDDED_FRAMEWORKS)
	FOREACH(BINARIES ${ARGN})
		SET( CM_TARGET_INSTALL_EMBEDDED_FRAMEWORKS ${CM_TARGET_INSTALL_EMBEDDED_FRAMEWORKS} ${BINARIES} )
	ENDFOREACH(BINARIES)
ENDMACRO(CM_TARGET_ADD_EMBEDDED_FRAMEWORKS)


# *******************************************************
# Target Add Translation
# *******************************************************
MACRO(CM_TARGET_ADD_XLATE GROUP)
	SET( CM_TARGET_XLATE ${CM_TARGET_XLATE} ${ARGN} )
	SET( CM_TARGET_SOURCES ${CM_TARGET_SOURCES} ${ARGN} )	
	IF (NOT ${GROUP} STREQUAL "")
		SOURCE_GROUP( ${GROUP} FILES ${ARGN} )
	ENDIF (NOT ${GROUP} STREQUAL "")	
ENDMACRO(CM_TARGET_ADD_XLATE GROUP)

# *******************************************************
# Target Add DEPENDs
# *******************************************************
MACRO(CM_TARGET_ADD_DEPENDS)
	SET( CM_TARGET_DEPENDS ${CM_TARGET_DEPENDS} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_DEPENDS)

MACRO(CM_TARGET_ADD_PUBLIC_DEPENDS)
	SET( CM_TARGET_DEPENDS ${CM_TARGET_DEPENDS} ${ARGN} )
	SET( CM_TARGET_PUBLIC_DEPENDS ${CM_TARGET_PUBLIC_DEPENDS} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_PUBLIC_DEPENDS)

MACRO(CM_ADD_NO_DUPLICATE VAR_VALUES VALUE)
	SET(CM_NODUPLICATE 1)
	FOREACH(VAR_VALUE ${${VAR_VALUES}}) 
		IF (${VAR_VALUE} STREQUAL ${VALUE} )
			SET(CM_NODUPLICATE)
		ENDIF (${VAR_VALUE} STREQUAL ${VALUE} )
	ENDFOREACH(VAR_VALUE ${${VAR_VALUES}}) 
	IF (CM_NODUPLICATE)
		SET(${VAR_VALUES} ${${VAR_VALUES}} ${VALUE})
	ENDIF (CM_NODUPLICATE)
ENDMACRO(CM_ADD_NO_DUPLICATE VAR VALUE)

MACRO(CM_GET_RECURSIVE_TARGETS VAR TARGET)
	SET(DEPENDS)
	CM_GET_TARGET_PROPERTY( DEPENDS ${TARGET} CM_DEPENDS)
	FOREACH(DEPEND ${DEPENDS})
		CM_GET_RECURSIVE_TARGETS(${VAR} ${DEPEND})
		CM_ADD_NO_DUPLICATE(${VAR} ${DEPEND})	
	ENDFOREACH(DEPEND DEPENDS)
ENDMACRO(CM_GET_RECURSIVE_TARGETS VAR TARGET)

# *******************************************************
# Target Add DEPENDs
# *******************************************************
MACRO(CM_TARGET_ADD_LINK_FLAGS)
	SET( CM_TARGET_LINK_FLAGS ${CM_TARGET_LINK_FLAGS} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_LINK_FLAGS)


# *******************************************************
# Target Add INCLUDES
# *******************************************************
MACRO(CM_TARGET_ADD_INCLUDES)
	SET( CM_TARGET_INCLUDES ${CM_TARGET_INCLUDES} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_INCLUDES INCLUDES)

MACRO(CM_TARGET_DEPEND_ADD_INCLUDES)
	SET(CM_TARGET_DEPEND_INCLUDES ${CM_TARGET_DEPEND_INCLUDES} ${ARGN})
ENDMACRO(CM_TARGET_DEPEND_ADD_INCLUDES INCLUDES)

MACRO(CM_TARGET_AND_DEPEND_ADD_INCLUDES)
	CM_TARGET_ADD_INCLUDES(${ARGN})
	CM_TARGET_DEPEND_ADD_INCLUDES(${ARGN})
ENDMACRO(CM_TARGET_AND_DEPEND_ADD_INCLUDES)

MACRO(CM_GET_TARGET_INCLUDES TARGET VARIABLE)
	CM_GET_TARGET_PROPERTY( ${VARIABLE}	${TARGET}	CM_DEPEND_INCLUDES)
ENDMACRO(CM_GET_TARGET_INCLUDES TARGET VARIABLE)

# *******************************************************
# Target Add DEFINES
# *******************************************************
MACRO(CM_TARGET_ADD_DEFINES)
	SET( CM_TARGET_DEFINES ${CM_TARGET_DEFINES} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_DEFINES)

MACRO(CM_TARGET_DEPEND_ADD_DEFINES)
	SET(CM_TARGET_DEPEND_DEFINES ${CM_TARGET_DEPEND_DEFINES} ${ARGN})
ENDMACRO(CM_TARGET_DEPEND_ADD_DEFINES)

MACRO(CM_TARGET_AND_DEPEND_ADD_DEFINES)
	CM_TARGET_ADD_DEFINES(${ARGN})
	CM_TARGET_DEPEND_ADD_DEFINES(${ARGN})
ENDMACRO(CM_TARGET_AND_DEPEND_ADD_DEFINES)



# *******************************************************
# Target Add LIBRARIES
# *******************************************************
MACRO(CM_TARGET_ADD_LIBRARIES)
	SET( CM_TARGET_LIBRARIES ${CM_TARGET_LIBRARIES} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_LIBRARIES)

MACRO(CM_TARGET_DEPEND_ADD_LIBRARIES)
	SET(CM_TARGET_DEPEND_LIBRARIES ${CM_TARGET_DEPEND_LIBRARIES} ${ARGN})
ENDMACRO(CM_TARGET_DEPEND_ADD_LIBRARIES LIBRARIES)

MACRO(CM_TARGET_AND_DEPEND_ADD_LIBRARIES)
	CM_TARGET_ADD_LIBRARIES(${ARGN})
	CM_TARGET_DEPEND_ADD_LIBRARIES(${ARGN})
ENDMACRO(CM_TARGET_AND_DEPEND_ADD_LIBRARIES)

MACRO(CM_TARGET_ADD_DEBUG_LIBRARIES)
	SET( CM_TARGET_DEBUG_LIBRARIES ${CM_TARGET_DEBUG_LIBRARIES} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_DEBUG_LIBRARIES)

MACRO(CM_TARGET_DEPEND_ADD_DEBUG_LIBRARIES)
	SET(CM_TARGET_DEPEND_DEBUG_LIBRARIES ${CM_TARGET_DEPEND_DEBUG_LIBRARIES} ${ARGN})
ENDMACRO(CM_TARGET_DEPEND_ADD_DEBUG_LIBRARIES)

MACRO(CM_TARGET_AND_DEPEND_ADD_DEBUG_LIBRARIES)
	CM_TARGET_ADD_DEBUG_LIBRARIES(${ARGN})
	CM_TARGET_DEPEND_ADD_DEBUG_LIBRARIES(${ARGN})
ENDMACRO(CM_TARGET_AND_DEPEND_ADD_DEBUG_LIBRARIES)

MACRO(CM_TARGET_ADD_RELEASE_LIBRARIES)
	SET( CM_TARGET_ADD_RELEASE_LIBRARIES ${CM_TARGET_RELEASE_LIBRARIES} ${ARGN} )
ENDMACRO(CM_TARGET_ADD_RELEASE_LIBRARIES)

MACRO(CM_TARGET_DEPEND_ADD_RELEASE_LIBRARIES)
	SET(CM_TARGET_DEPEND_RELEASE_LIBRARIES ${CM_TARGET_DEPEND_RELEASE_LIBRARIES} ${ARGN})
ENDMACRO(CM_TARGET_DEPEND_ADD_RELEASE_LIBRARIES)

MACRO(CM_TARGET_AND_DEPEND_ADD_RELEASE_LIBRARIES)
	CM_TARGET_ADD_RELEASE_LIBRARIES(${ARGN})
	CM_TARGET_DEPEND_ADD_RELEASE_LIBRARIES(${ARGN})
ENDMACRO(CM_TARGET_AND_DEPEND_ADD_RELEASE_LIBRARIES)

# *******************************************************
# Target Add Directory
# *******************************************************
MACRO(CM_ADD_DIRECTORY DIRECTORY)
	# get relative directory
	# -----------------------------------
	get_filename_component(FullPath ${DIRECTORY} ABSOLUTE)
	file(RELATIVE_PATH RelativeProject ${CM_ROOT_DIRECTORY} ${FullPath} )
	SET(CM_BINARY_SRC_DIR "${CMAKE_BINARY_DIR}/${RelativeProject}" )
	ADD_SUBDIRECTORY("${DIRECTORY}" "${CMAKE_BINARY_DIR}/${RelativeProject}")
ENDMACRO(CM_ADD_DIRECTORY DIRECTORY)

# *******************************************************
# Target Add depend Sources
# *******************************************************
MACRO(CM_TARGET_QT_ADD_MOC)
	SET( CM_TARGET_QT_MOC ${CM_TARGET_QT_MOC} ${ARGN} )
ENDMACRO(CM_TARGET_QT_ADD_MOC)

# *******************************************************
# QT Special Target Add UI
# *******************************************************
MACRO(CM_TARGET_QT_ADD_UI GROUP)
	SET( CM_TARGET_QT_UI ${CM_TARGET_QT_UI} ${ARGN} )
	SOURCE_GROUP( ${GROUP} FILES ${ARGN} )
ENDMACRO(CM_TARGET_QT_ADD_UI)

# *******************************************************
# QT Special Target Add Resources
# *******************************************************
MACRO(CM_TARGET_QT_ADD_RESOURCES GROUP)
	SET( CM_TARGET_QT_RESOURCES ${CM_TARGET_QT_RESOURCES} ${ARGN} )
#	SOURCE_GROUP( ${GROUP} FILES ${ARGN} )
ENDMACRO(CM_TARGET_QT_ADD_RESOURCES)

# *******************************************************
# ADD A Test
# *******************************************************
MACRO(CM_ADD_TEST TARGET_NAME)
	SET( TEST_NAME Test_${TARGET_NAME} )

	PROJECT( ${TEST_NAME})		
	
	CM_GET_TARGET_PROPERTY( CM_TEST_INCLUDES	${TARGET_NAME}	CM_DEPEND_INCLUDES)
	CM_GET_TARGET_PROPERTY( CM_TEST_LIBRARIES	${TARGET_NAME}	CM_DEPEND_LIBRARIES)
	CM_GET_TARGET_PROPERTY( CM_TEST_DEFINES		${TARGET_NAME}	CM_DEPEND_DEFINES)
	CM_GET_TARGET_PROPERTY( CM_TEST_SOURCES		${TARGET_NAME}	CM_DEPEND_SOURCES)
	
	# Includes
	# -------------------------------------
	INCLUDE_DIRECTORIES(AFTER ${CM_TEST_INCLUDES})
	
	ADD_EXECUTABLE( ${TEST_NAME} ${ARGN} )
	SET(EXECUTABLE_OUTPUT_PATH	"${CM_BIN_DIR}")
	
	# Dependencies
	# -------------------------------------
	ADD_DEPENDENCIES( ${TEST_NAME} ${TARGET_NAME} )

	# Libraries
	# -------------------------------------
	TARGET_LINK_LIBRARIES(${TEST_NAME} ${CM_TEST_LIBRARIES})
	
	# Defines
	# -------------------------------------
	ADD_DEFINITIONS(${CM_TEST_DEFINES})
	
	# Tests
	# -------------------------------------
	GET_TARGET_PROPERTY(EXECUTABLE_PATH ${TEST_NAME} LOCATION)
	ADD_TEST(${TEST_NAME} ${EXECUTABLE_OUTPUT_PATH}/${CMAKE_BUILD_TYPE}/${TEST_NAME})
ENDMACRO(CM_ADD_TEST TARGET_NAME )
	
# *******************************************************
# DEFAULT ASC Adobe compile scripts
# *******************************************************
MACRO(CM_GET_PATH VAR FILE)
	STRING(REGEX REPLACE "/[^/]*$" "" ${VAR} "${FILE}")
ENDMACRO(CM_GET_PATH VAR FILE)

MACRO(CM_GET_FILENAME VAR FILE)
	STRING(REGEX REPLACE "/[^/]*$" "" ${VAR} "${FILE}")
	FILE(RELATIVE_PATH ${VAR} ${${VAR}} ${FILE})
ENDMACRO(CM_GET_FILENAME VAR FILE)

MACRO(CM_FILENAME_REMOVE_EXT VAR FILE)
	STRING(REGEX REPLACE ".[^.]*$" "" ${VAR} "${FILE}")
ENDMACRO(CM_FILENAME_REMOVE_EXT VAR FILE)

# *******************************************************
# CM_INSTALL_BUNDLE_APP
# *******************************************************

MACRO(CM_INSTALL_BEGIN)
ENDMACRO(CM_INSTALL_BEGIN)

MACRO(CM_INSTALL_END)
	# Just to keep notes of what is being used
	# ------------------------------------------
	#SET(CPACK_TEMPORARY_DIRECTORY ...
	#SET(CPACK_TEMPORARY_INSTALL_DIRECTORY ${CMAKE_INSTALL_PREFIX}) ...
	#SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CMake ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}") ...
	# ------------------------------------------
ENDMACRO(CM_INSTALL_END)

MACRO(CM_INSTALL_ADDITIONNAL)
	SET(CM_TARGET_INSTALL_ADDITIONNAL ${CM_TARGET_INSTALL_ADDITIONNAL} ${ARGN} )
ENDMACRO(CM_INSTALL_ADDITIONNAL)

# @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ 
# @@@@@ PATCH FOR COMPENSATION OF THE WRONG DEFAULT DIRECTORY IN CPACK 
# @@@@@ BEING USR WE WILL USR ../Applications in the INSTALL Directory
# @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ @@@@@ 

# MESSAGE( "Install distribution directory: ${CM_DISTRIB_DIR}/usr")
# SET(CMAKE_INSTALL_PREFIX ${CM_DISTRIB_DIR} )

MACRO(CM_INSTALL_BUNDLE_APP_I CM_APP CM_INSTALL_CONFIG )
	# ************************************************************
	# On the mac make sure we include all the libraries
	# inside the app package for this we must notify the linker to 
	# copy the libraries and then update references to local references
	#  	This code is too is not smart enough to adjust just the dependent
	# libraries this will have to be done in a future homework 
	# ************************************************************
	IF (APPLE)
		SET(INST_DIR . )
		
		INSTALL(TARGETS ${CM_APP} BUNDLE DESTINATION ${INST_DIR} CONFIGURATIONS ${CM_INSTALL_CONFIG} )
		
		# generate a qmake script
		# ----------------------------------
		SET( CM_INST_FN "${CMAKE_BINARY_DIR}/install_${CM_INSTALL_CONFIG}_${CM_APP}.cmake")
		FILE(WRITE 	${CM_INST_FN} "# QMake install ${CM_APP}\n" )
		FILE(APPEND ${CM_INST_FN} "# --------------------------------------------------- \n" )

		# get the application path
		# -------------------------------
		CM_GET_TARGET_PROPERTY( APP_NAME ${CM_APP} OUTPUT_NAME)
		SET( CM_FULL_APP_PATH ${CMAKE_INSTALL_PREFIX}/${INST_DIR}/${APP_NAME}.app )
		

		# get all depends targets libs and extract the name for the configuration
		# -----------------------------------------------------------------------
		SET(CM_INSTALL_TARGETS "")
		CM_GET_RECURSIVE_TARGETS(CM_INTALL_TARGETS ${CM_APP}  )
		SET(CM_INSTALL_LIBS "")
		SET(CM_INSTALLS_ADDITIONNALS "")
		FOREACH(CM_INSTALL_TARGET ${CM_INTALL_TARGETS})
			SET(TMP_TYPE)
			CM_GET_TARGET_PROPERTY( TMP_TYPE ${CM_INSTALL_TARGET} TYPE)
#			MESSAGE( ------- ${CM_INSTALL_TARGET} ------- )
			IF (${TMP_TYPE} STREQUAL "SHARED_LIBRARY")
				SET(TMP)
				CM_GET_TARGET_PROPERTY( TMP ${CM_INSTALL_TARGET} OUTPUT_NAME)

				# get full set filename of the depends
				# ---------------------------------
				get_filename_component(TMP_ABS ${CM_BIN_DIR}/${CM_INSTALL_CONFIG}/lib${TMP}.dylib ABSOLUTE)
				SET(CM_INSTALL_LIBS ${CM_INSTALL_LIBS} ${TMP_ABS} ${TMP_ABS}) # twice one for full path then fo otoolpath

				# generate the full relative filename 
				# -----------------------------------
				get_filename_component(TMP_FILENAME ${TMP_ABS} NAME)
				SET(CM_INSTALL_LIBS ${CM_INSTALL_LIBS} Frameworks/${TMP_FILENAME})
				
			ENDIF (${TMP_TYPE} STREQUAL "SHARED_LIBRARY")
			
			# instert additionnals
			# ----------------------------------------------------------------------------------------
			CM_GET_TARGET_PROPERTY( CM_INSTALLS_ADDITIONNALS ${CM_INSTALL_TARGET} INSTALL_ADDITIONNAL)
			
		ENDFOREACH(CM_INSTALL_TARGET ${CM_INSTALL_TARGETS})
	
		# Additionnal  Libraries
		# ----------------------------------------
		SET(CM_INSTALLED_LIBS )
		SET(CM_INSTALL_LIBS ${CM_INSTALL_LIBS} ${CM_INSTALLS_ADDITIONNALS} ${ARGN} )

		# copy the libs and change install path
		# ----------------------------------------
		SET(CM_INSTALL_SRC)
		SET(CM_INSTALL_SRC_OTOOL)
		SET(CM_INSTALL_DST)
		FOREACH(CM_INSTALL_LIB ${CM_INSTALL_LIBS})
			# extract src then dst
			# --------------------------
			IF (NOT CM_INSTALL_SRC)
				get_filename_component( CM_INSTALL_SRC  ${CM_INSTALL_LIB} ABSOLUTE)
			ELSE (NOT CM_INSTALL_SRC)
				IF (NOT CM_INSTALL_SRC_OTOOL)
					SET(CM_INSTALL_SRC_OTOOL 		${CM_INSTALL_LIB})
				ELSE (NOT CM_INSTALL_SRC_OTOOL)
					SET(CM_INSTALL_DST 		${CM_INSTALL_LIB})
					get_filename_component(CM_INSTALL_DST_FULL ${CM_FULL_APP_PATH}/Contents/${CM_INSTALL_DST} ABSOLUTE)
				ENDIF (NOT CM_INSTALL_SRC_OTOOL)
			ENDIF (NOT CM_INSTALL_SRC)
			IF (CM_INSTALL_DST)
				get_filename_component(TMP_INSTALL_DST_DIR ${CM_INSTALL_DST} PATH)
				INSTALL(FILES ${CM_INSTALL_SRC} DESTINATION ${INST_DIR}/${APP_NAME}.app/Contents/${TMP_INSTALL_DST_DIR} CONFIGURATIONS ${CM_INSTALL_CONFIG} )  
				FILE(APPEND ${CM_INST_FN} 
					"execute_process(COMMAND install_name_tool -id \"@executable_path/../${CM_INSTALL_DST}\" \"${CM_INSTALL_DST_FULL}\" )\n" 
				)
#				Message("execute_process(COMMAND install_name_tool -id \"@executable_path/../${CM_INSTALL_DST}\" \"${CM_INSTALL_DST_FULL}\" )\n" )
				
				# RESET VARIABLES
				# ----------------
				SET(CM_INSTALL_SRC)
				SET(CM_INSTALL_SRC_OTOOL)
				SET(CM_INSTALL_DST)
			ENDIF (CM_INSTALL_DST)
		ENDFOREACH(CM_INSTALL_LIB ${CM_INSTALL_LIBS})

		# painful installation of all library paths
		# ---------------------------------------------
		SET(CM_INSTALL_SRC)
		SET(CM_INSTALL_SRC_OTOOL)
		SET(CM_INSTALL_DST)
		FOREACH(CM_INSTALL_LIB ${CM_INSTALL_LIBS} MacOS/${APP_NAME} MacOS/${APP_NAME} MacOS/${APP_NAME}) # Added the app in the list
			# extract src then dst
			# --------------------------
			IF (NOT CM_INSTALL_SRC)
				get_filename_component( CM_INSTALL_SRC  ${CM_INSTALL_LIB} ABSOLUTE)
			ELSE (NOT CM_INSTALL_SRC)
				IF (NOT CM_INSTALL_SRC_OTOOL)
					SET(CM_INSTALL_SRC_OTOOL 		${CM_INSTALL_LIB})
				ELSE (NOT CM_INSTALL_SRC_OTOOL)
					SET(CM_INSTALL_DST 		${CM_INSTALL_LIB})
					get_filename_component(CM_INSTALL_DST_FULL ${CM_FULL_APP_PATH}/Contents/${CM_INSTALL_DST} ABSOLUTE)
				ENDIF (NOT CM_INSTALL_SRC_OTOOL)
			ENDIF (NOT CM_INSTALL_SRC)
			IF (CM_INSTALL_DST)
				SET(CM_INSTALL_DEPEND_SRC)
				SET(CM_INSTALL_DEPEND_SRC_OTOOL)
				SET(CM_INSTALL_DEPEND_DST)
				FOREACH(CM_INSTALL_DEPEND_LIB ${CM_INSTALL_LIBS})
					IF (NOT CM_INSTALL_DEPEND_SRC)
						get_filename_component( CM_INSTALL_DEPEND_SRC ${CM_INSTALL_DEPEND_LIB} ABSOLUTE)
					ELSE (NOT CM_INSTALL_DEPEND_SRC)
						IF (NOT CM_INSTALL_DEPEND_SRC_OTOOL)
							SET(CM_INSTALL_DEPEND_SRC_OTOOL 		${CM_INSTALL_DEPEND_LIB})
						ELSE (NOT CM_INSTALL_DEPEND_SRC_OTOOL)
							SET(CM_INSTALL_DEPEND_DST 		${CM_INSTALL_DEPEND_LIB})
							get_filename_component(CM_INSTALL_DEPEND_DST_FULL ${CM_FULL_APP_PATH}/Contents/${CM_INSTALL_DEPEND_DST} ABSOLUTE)
						ENDIF (NOT CM_INSTALL_DEPEND_SRC_OTOOL)
					ENDIF (NOT CM_INSTALL_DEPEND_SRC)
					IF (CM_INSTALL_DEPEND_DST)
						FILE(APPEND ${CM_INST_FN} 
							"execute_process(COMMAND install_name_tool -change \"${CM_INSTALL_DEPEND_SRC_OTOOL}\" \"@executable_path/../${CM_INSTALL_DEPEND_DST}\" \"${CM_INSTALL_DST_FULL}\" )\n" 
						)
#						Message("-----install_name_tool -change \"${CM_INSTALL_DEPEND_SRC_OTOOL}\" \"@executable_path/../${CM_INSTALL_DEPEND_DST}\" \"${CM_INSTALL_DST_FULL}\"" )

						# RESET VARIABLES
						# -------------------------
						SET(CM_INSTALL_DEPEND_SRC)
						SET(CM_INSTALL_DEPEND_SRC_OTOOL)
						SET(CM_INSTALL_DEPEND_DST)
					ENDIF (CM_INSTALL_DEPEND_DST)
				ENDFOREACH(CM_INSTALL_DEPEND_LIB ${CM_INSTALL_LIBS})
			
				# RESET VARIABLES
				# ----------------
				SET(CM_INSTALL_SRC)
				SET(CM_INSTALL_SRC_OTOOL)
				SET(CM_INSTALL_DST)
			ENDIF (CM_INSTALL_DST)
		ENDFOREACH(CM_INSTALL_LIB ${CM_INSTALL_LIBS} ${CM_FULL_APP_PATH}/Contents/MacOS/${APP_NAME} Contents/MacOS/${APP_NAME}) 
			
		
#			FOREACH(CM_DEPEND_INSTALL_LIB ${CM_INSTALL_LIBS})
#				get_filename_component(CM_INSTALL_LIB_DEPEND ${CM_DEPEND_INSTALL_LIB} ABSOLUTE)
#				get_filename_component(CM_INSTALL_LIB_DEPEND_FN ${CM_DEPEND_INSTALL_LIB} NAME)
#				FILE(APPEND ${CM_INST_FN} 
#					"execute_process(COMMAND install_name_tool -change \"${CM_INSTALL_LIB_DEPEND}\" \"@executable_path/../Frameworks/${CM_INSTALL_LIB_DEPEND_FN}\" \"${CM_INSTALLED_LIB}\" )\n" 
#				)
#			ENDFOREACH(CM_DEPEND_INSTALL_LIB ${CM_INSTALL_LIBS})
#		ENDFOREACH(CM_INSTALLED_LIB ${CM_INSTALLED_LIBS} ${CM_FULL_APP_PATH}.app/Contents/MacOS/${APP_NAME})

		# INSTALLS
		# ----------------------------------------------
		# invoke the install the script 
		INSTALL(SCRIPT ${CM_INST_FN} CONFIGURATIONS ${CM_INSTALL_CONFIG}  )
	
	ENDIF (APPLE)
ENDMACRO(CM_INSTALL_BUNDLE_APP_I CM_APP CM_INSTALL_CONFIG )

MACRO(CM_INSTALL_BUNDLE_APP CM_APP )
#	CM_INSTALL_BUNDLE_APP_I(${CM_APP} Debug)
	CM_INSTALL_BUNDLE_APP_I(${CM_APP} Release)
ENDMACRO(CM_INSTALL_BUNDLE_APP CM_APP )

MACRO(CM_INSTALL_APP_I CM_APP CM_INSTALL_CONFIG )
	# ************************************************************
	# On the px make sure we include all the libraries
	# inside the app package for this we must notify the linker to 
	# copy the libraries and then update references to local references
	#  	This code is too is not smart enough to adjust just the dependent
	# libraries this will have to be done in a future homework 
	# ************************************************************
	SET(INST_DIR . )
		
	INSTALL(TARGETS ${CM_APP} RUNTIME DESTINATION ${INST_DIR}/bin CONFIGURATIONS ${CM_INSTALL_CONFIG} )
#	INSTALL(TARGETS ${CM_APP} LIBRARY DESTINATION ${INST_DIR} CONFIGURATIONS ${CM_INSTALL_CONFIG} )
		
	# get the application path
	# -------------------------------
	CM_GET_TARGET_PROPERTY( APP_NAME ${CM_APP} OUTPUT_NAME)
	SET( CM_FULL_APP_PATH ${CMAKE_INSTALL_PREFIX}/${INST_DIR}/${APP_NAME}.app )
		

	# get all depends targets libs and extract the name for the configuration
	# -----------------------------------------------------------------------
	SET(CM_INSTALL_TARGETS "")
	SET(CM_INSTALLS_ADDITIONNALS "")
	
	CM_GET_RECURSIVE_TARGETS(CM_INTALL_TARGETS ${CM_APP}  )
	SET(CM_INSTALL_LIBS "")
	FOREACH(CM_INSTALL_TARGET ${CM_INTALL_TARGETS})
		SET(TMP_TYPE)
		CM_GET_TARGET_PROPERTY( TMP_TYPE ${CM_INSTALL_TARGET} TYPE)
		IF (${TMP_TYPE} STREQUAL "SHARED_LIBRARY")
			SET(TMP)
			CM_GET_TARGET_PROPERTY( TMP ${CM_INSTALL_TARGET} OUTPUT_NAME)

			# get full set filename of the depends
			# ---------------------------------
			get_filename_component(TMP_ABS ${CM_BIN_DIR}/${CM_INSTALL_CONFIG}/${TMP}.dll ABSOLUTE)
			SET(CM_INSTALL_LIBS ${CM_INSTALL_LIBS} ${TMP_ABS} ${TMP_ABS}) # twice one for full path then fo otoolpath

			# generate the full relative filename 
			# -----------------------------------
			get_filename_component(TMP_FILENAME ${TMP_ABS} NAME)
			SET(CM_INSTALL_LIBS ${CM_INSTALL_LIBS} bin/${TMP_FILENAME})
				
		ENDIF (${TMP_TYPE} STREQUAL "SHARED_LIBRARY")
		
		# instert additionnals
		# ----------------------------------------------------------------------------------------
		CM_GET_TARGET_PROPERTY( CM_INSTALLS_ADDITIONNALS ${CM_INSTALL_TARGET} INSTALL_ADDITIONNAL)
	ENDFOREACH(CM_INSTALL_TARGET ${CM_INSTALL_TARGETS})
	
	# Additionnal  Libraries
	# ----------------------------------------
	SET(CM_INSTALLED_LIBS )
	SET(CM_INSTALL_LIBS ${CM_INSTALL_LIBS} ${CM_INSTALLS_ADDITIONNALS} ${ARGN} )

	# copy the libs and change install path
	# ----------------------------------------
	SET(CM_INSTALL_SRC)
	SET(CM_INSTALL_SRC_OTOOL)
	SET(CM_INSTALL_DST)
	FOREACH(CM_INSTALL_LIB ${CM_INSTALL_LIBS})
		# extract src then dst
		# --------------------------
		IF (NOT CM_INSTALL_SRC)
			get_filename_component( CM_INSTALL_SRC  ${CM_INSTALL_LIB} ABSOLUTE)
		ELSE (NOT CM_INSTALL_SRC)
			IF (NOT CM_INSTALL_SRC_OTOOL)
				SET(CM_INSTALL_SRC_OTOOL 		${CM_INSTALL_LIB})
			ELSE (NOT CM_INSTALL_SRC_OTOOL)
				SET(CM_INSTALL_DST 		${CM_INSTALL_LIB})
#				get_filename_component(CM_INSTALL_DST_FULL ${CM_FULL_APP_PATH}/Contents/${CM_INSTALL_DST} ABSOLUTE)
			ENDIF (NOT CM_INSTALL_SRC_OTOOL)
		ENDIF (NOT CM_INSTALL_SRC)
		IF (CM_INSTALL_DST)
			get_filename_component(TMP_INSTALL_DST_DIR ${CM_INSTALL_DST} PATH)
			INSTALL(FILES ${CM_INSTALL_SRC} DESTINATION ${INST_DIR}/${TMP_INSTALL_DST_DIR} CONFIGURATIONS ${CM_INSTALL_CONFIG} )
				
	 		# Message(" --- INSTALL(FILES ${CM_INSTALL_SRC} DESTINATION ${INST_DIR}/${TMP_INSTALL_DST_DIR} CONFIGURATIONS ${CM_INSTALL_CONFIG} ) ---")
			# RESET VARIABLES
			# ----------------
			SET(CM_INSTALL_SRC)
			SET(CM_INSTALL_SRC_OTOOL)
			SET(CM_INSTALL_DST)
		ENDIF (CM_INSTALL_DST)
	ENDFOREACH(CM_INSTALL_LIB ${CM_INSTALL_LIBS})
	
ENDMACRO(CM_INSTALL_APP_I CM_APP CM_INSTALL_CONFIG )

MACRO(CM_INSTALL_APP CM_APP )
	CM_INSTALL_APP_I(${CM_APP} Debug ${ARGN})
	CM_INSTALL_APP_I(${CM_APP} Release ${ARGN})
ENDMACRO(CM_INSTALL_APP CM_APP CM_INSTALL_CONFIG )

MACRO(CM_INSTALL_EMBEDED_RESOURCE_I CM_TARGET CM_INSTALL_CONFIG CM_SRCDIR	CM_DSTDIR )
	IF (NOT APPLE)	
		SET( FULL_SRCDIR ${CM_BIN_DIR}/${CM_INSTALL_CONFIG}/${CM_SRCDIR})
		INSTALL(DIRECTORY ${FULL_SRCDIR} DESTINATION ${INST_DIR}/bin/${CM_DSTDIR} ) 
	ENDIF (NOT APPLE)	
ENDMACRO(CM_INSTALL_EMBEDED_RESOURCE_I CM_TARGET CM_INSTALL_CONFIG CM_SR CM_DSTDIR )

MACRO(CM_INSTALL_EMBEDED_RESOURCE CM_TARGET CM_SRCDIR	CM_DSTDIR )
	CM_INSTALL_EMBEDED_RESOURCE_I(${CM_TARGET} Debug	${CM_SRCDIR} ${CM_DSTDIR} )
	CM_INSTALL_EMBEDED_RESOURCE_I(${CM_TARGET} Release	${CM_SRCDIR} ${CM_DSTDIR} )
ENDMACRO(CM_INSTALL_EMBEDED_RESOURCE CM_TARGET CM_SRCDIR	CM_DSTDIR )